#!/bin/bash

# Check if at least two arguments are provided
if [ "$#" -lt 2 ]; then
    echo "Usage: $0 output_file input_file(s)"
    exit 1
fi

output_file="$1"
shift # Remove the first argument, so "$@" now contains only the input files

# Write the header and library declaration to the output file
cat > "$output_file" <<EOF
/******************************************************************************/
/* Liberty models generated by PrimeLib T-2022.03-SP1 build date: Apr 12, 2022 13:01:04. (SMSC-2) */
/* PrimeLib Path: /proj/cad/synopsys/synopsys_2021/primelib/T-2022.03-SP1/linux64/bin/primelib */
/* Host Name: engnx03a.utdallas.edu, User Name: axk220238, PID: 9201          */
/* Directory: /home/eng/a/axk220238/vlsi/cad/gf65/primelib_gf65 */
/*                                                                            */
/* File generated on Wed Nov 29 15:57:35 CST 2023. (SMSC-3)                   */
/******************************************************************************/


library(gf65) { 
  delay_model : table_lookup ; 
  library_features(report_delay_calculation, report_power_calculation);
  time_unit : 1ns ; 
  voltage_unit : 1V ; 
  current_unit : 1mA ; 
  capacitive_load_unit(1, pf);
  pulling_resistance_unit : 1ohm ; 
  leakage_power_unit : 1uW ; 
  input_threshold_pct_fall : 50 ; 
  input_threshold_pct_rise : 50 ; 
  output_threshold_pct_fall : 50 ; 
  output_threshold_pct_rise : 50 ; 
  slew_derate_from_library : 1 ; 
  slew_lower_threshold_pct_fall : 10 ; 
  slew_lower_threshold_pct_rise : 10 ; 
  slew_upper_threshold_pct_fall : 90 ; 
  slew_upper_threshold_pct_rise : 90 ; 
  nom_process : 1 ; 
  nom_temperature : 0 ; 
  nom_voltage : 1.2 ; 
  default_cell_leakage_power : 0 ; 
  default_fanout_load : 1 ; 
  default_inout_pin_cap : 1 ; 
  default_input_pin_cap : 1 ; 
  default_leakage_power_density : 0 ; 
  default_output_pin_cap : 0 ; 

  operating_conditions(gf65) { 
    process : 1 ; 
    temperature : 0 ; 
    voltage : 1.2 ; 
  }

  input_voltage(default) { 
    vil : 0 ; 
    vih : 1.2 ; 
    vimin : 0 ; 
    vimax : 1.2 ; 
  }

  output_voltage(default) { 
    vol : 0 ; 
    voh : 1.2 ; 
    vomin : 0 ; 
    vomax : 1.2 ; 
  }

  lu_table_template(ndw_ntin_nvolt_5x2) { 
    variable_1 : input_net_transition ; 
    variable_2 : normalized_voltage ; 
    index_1("1, 2, 3, 4, 5");
    index_2("1, 2");
  }

  lu_table_template(tmg_ntin_oload_5x5) { 
    variable_1 : input_net_transition ; 
    variable_2 : total_output_net_capacitance ; 
    index_1("1, 2, 3, 4, 5");
    index_2("1, 2, 3, 4, 5");
  }

  power_lut_template(pwr_tin_oload_5x5) { 
    variable_1 : input_transition_time ; 
    variable_2 : total_output_net_capacitance ; 
    index_1("1, 2, 3, 4, 5");
    index_2("1, 2, 3, 4, 5");
  }

  normalized_driver_waveform(ndw_ntin_nvolt_5x2) { 
    index_1("0.01, 0.2727, 1.195, 2.956, 5.7");
    index_2("0, 1");
    values("0, 0.0125",\
           "0, 0.3409",\
           "0, 1.494",\
           "0, 3.695",\
           "0, 7.125");
  }

  normalized_driver_waveform(ndw_ntin_nvolt_5x2) { 
    driver_waveform_name : "driver_waveform_default_fall" ; 
    index_1("0.01, 0.2727, 1.195, 2.956, 5.7");
    index_2("0, 1");
    values("0, 0.0125",\
           "0, 0.3409",\
           "0, 1.494",\
           "0, 3.695",\
           "0, 7.125");
  }

  normalized_driver_waveform(ndw_ntin_nvolt_5x2) { 
    driver_waveform_name : "driver_waveform_default_rise" ; 
    index_1("0.01, 0.2727, 1.195, 2.956, 5.7");
    index_2("0, 1");
    values("0, 0.0125",\
           "0, 0.3409",\
           "0, 1.494",\
           "0, 3.695",\
           "0, 7.125");
  }
EOF

# Process each input file
for input_file in "$@"; do
    # Check if the input file exists
    if [ ! -f "$input_file" ]; then
        echo "Input file not found: $input_file"
        continue
    fi

    # Process each line containing 'cell(' in the input file
    grep -n "cell(" "$input_file" | cut -d: -f1 | while read -r start_line; do
        end_line=$(awk -v start=$start_line '
        NR >= start {
            if (/{/) brace_count++;
            if (/}/) brace_count--;
            if (brace_count == 0 && NR > start) {
                print NR;
                exit;
            }
        }' "$input_file")

        # Extract and append the cell block to the output file
        if [ ! -z "$end_line" ]; then
            sed -n "${start_line},${end_line}p" "$input_file" |
            sed '/pin(VDD)/,/^    }/d' | # Remove pin(VDD) block
            sed '/pin(VSS)/,/^    }/d' >> "$output_file" # Remove pin(VSS) block
        fi
    done
done
# Append a closing curly brace at the end
echo "}" >> "$output_file"

echo "Processing complete. Output saved to $output_file."
